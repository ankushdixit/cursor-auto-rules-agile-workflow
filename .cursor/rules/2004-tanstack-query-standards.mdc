---
description: ENFORCE TanStack Query v5 patterns for efficient data fetching, caching, and error handling in Next.js
globs: **/{hooks,queries,api}/**/*.{ts,tsx}
alwaysApply: true
---

# TanStack Query Implementation Standards

## Context
- When implementing data fetching logic
- When managing server state and caching
- When handling loading and error states
- When optimizing API interactions

## Requirements
- Use structured query keys
- Implement proper error handling
- Configure cache strategies appropriately
- Follow consistent naming patterns

## Examples
<example>
✅ Query Implementation:
```ts
// hooks/queries/useUsers.ts
import { createQueryKeys } from '@lukemorales/query-key-factory';
import { useQuery, useMutation } from '@tanstack/react-query';

// Define query keys
export const userKeys = createQueryKeys('users', {
  detail: (id: string) => [id],
  list: (params: UserFilters) => [params],
});

// Query hook with proper typing
interface UseUsersQuery {
  filters?: UserFilters;
  config?: QueryConfig;
}

export const useUsers = ({ filters, config }: UseUsersQuery = {}) => {
  return useQuery({
    queryKey: userKeys.list(filters),
    queryFn: () => fetchUsers(filters),
    staleTime: 5 * 60 * 1000, // 5 minutes
    gcTime: 10 * 60 * 1000,   // 10 minutes
    ...config,
  });
};

// Mutation with optimistic updates
export const useUpdateUser = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: updateUser,
    onMutate: async (newUser) => {
      await queryClient.cancelQueries(userKeys.detail(newUser.id));
      const prevUser = queryClient.getQueryData(userKeys.detail(newUser.id));
      
      queryClient.setQueryData(userKeys.detail(newUser.id), newUser);
      return { prevUser };
    },
    onError: (err, newUser, context) => {
      queryClient.setQueryData(
        userKeys.detail(newUser.id),
        context.prevUser
      );
    },
    onSettled: (newUser) => {
      queryClient.invalidateQueries(userKeys.detail(newUser.id));
    },
  });
};
```
</example>

<example type="invalid">
❌ Poor Query Implementation:
```ts
// Avoid string-only query keys
const useUserData = () => useQuery({
  queryKey: ['userData'],
  queryFn: fetchUserData,
});

// Avoid missing error handling
const useProducts = () => useQuery({
  queryKey: ['products'],
  queryFn: fetchProducts,
  // Missing error boundaries or error handling
});

// Avoid excessive cache times
const useSettings = () => useQuery({
  queryKey: ['settings'],
  queryFn: fetchSettings,
  staleTime: Infinity, // Too aggressive caching
  cacheTime: Infinity,
});
```
</example>

## Critical Rules
  - Use query key factories for consistent key management
  - Implement proper TypeScript types for queries and mutations
  - Set appropriate staleTime and gcTime based on data volatility
  - Handle loading and error states with suspense boundaries
  - Use optimistic updates for better UX
  - Implement proper prefetching strategies
  - Configure retry logic appropriately
  - Use query invalidation strategically
  - Implement proper error boundaries
  - Document cache management decisions 