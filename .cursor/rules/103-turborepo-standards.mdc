---
description: ENFORCE Turborepo monorepo structure standards for consistent package organization and efficient task execution
globs: {turbo.json,package.json,**/package.json}
alwaysApply: true
---

# Turborepo Organization Standards

## Context
- When structuring monorepo workspaces
- When configuring build and test pipelines
- When managing shared dependencies
- When organizing package relationships

## Requirements
- Follow consistent workspace organization
- Implement proper dependency management
- Configure efficient task pipelines
- Maintain clear package boundaries

## Examples
<example>
✅ Monorepo Structure:
```json
// turbo.json
{
  "$schema": "https://turbo.build/schema.json",
  "globalDependencies": ["**/.env.*local"],
  "pipeline": {
    "build": {
      "dependsOn": ["^build"],
      "outputs": ["dist/**", ".next/**", "!.next/cache/**"]
    },
    "lint": {
      "outputs": []
    },
    "dev": {
      "cache": false,
      "persistent": true
    },
    "test": {
      "dependsOn": ["build"],
      "inputs": ["src/**/*.tsx", "src/**/*.ts", "test/**/*.ts", "test/**/*.tsx"]
    }
  }
}

// Root package.json
{
  "private": true,
  "workspaces": ["apps/*", "packages/*"],
  "scripts": {
    "build": "turbo run build",
    "dev": "turbo run dev",
    "lint": "turbo run lint",
    "test": "turbo run test",
    "clean": "turbo run clean && rm -rf node_modules"
  },
  "devDependencies": {
    "turbo": "latest"
  }
}

// packages/ui/package.json
{
  "name": "@acme/ui",
  "version": "0.1.0",
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "exports": {
    ".": "./dist",
    "./styles.css": "./dist/styles.css"
  },
  "scripts": {
    "build": "tsup",
    "dev": "tsup --watch",
    "lint": "eslint src/",
    "clean": "rm -rf .turbo && rm -rf node_modules && rm -rf dist"
  },
  "peerDependencies": {
    "react": "^18.0.0"
  },
  "dependencies": {
    "@acme/utils": "workspace:*"
  }
}
```

// Directory Structure:
```
.
├── apps/
│   ├── web/              # Next.js web app
│   └── docs/             # Documentation site
├── packages/
│   ├── ui/              # Shared UI components
│   ├── config/          # Shared configurations
│   └── utils/           # Shared utilities
├── tooling/
│   ├── eslint/          # ESLint configurations
│   └── typescript/      # TypeScript configurations
├── package.json         # Root package.json
└── turbo.json          # Turborepo configuration
```
</example>

<example type="invalid">
❌ Poor Monorepo Structure:
```json
// Avoid inconsistent task naming
{
  "pipeline": {
    "build-app": {},     // Inconsistent task name
    "build:lib": {},     // Mixed naming conventions
    "buildUtils": {}     // Camel case instead of kebab
  }
}

// Avoid direct cross-workspace imports
// apps/web/src/components/Button.tsx
import { Button } from "../../packages/ui/src/Button";  // Direct import

// Avoid duplicate dependencies
// packages/ui/package.json
{
  "dependencies": {
    "react": "18.0.0",        // Should be peerDependency
    "lodash": "4.17.21"       // Should be in root
  }
}

// Avoid missing workspace configurations
// package.json without workspace definition
{
  "name": "my-monorepo",
  "private": true,
  // Missing workspaces field
  "dependencies": {}
}
```
</example>

## Critical Rules
  - Use consistent task naming across all packages
  - Configure proper task dependencies and caching
  - Maintain clear package boundaries and interfaces
  - Use workspace protocol for internal dependencies
  - Share common dev dependencies at root level
  - Implement proper peer dependency management
  - Configure efficient build caching
  - Document package relationships
  - Use consistent versioning strategy
  - Follow monorepo-wide code standards 